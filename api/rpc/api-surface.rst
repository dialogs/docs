Using the API surface
---------------------

Starting from a service definition in a .proto file, gRPC provides protocol buffer compiler plugins that generate client- and server-side code. gRPC users typically call these APIs on the client side and implement the corresponding API on the server side.

- On the server side, the server implements the methods declared by the service and runs a gRPC server to handle client calls. The gRPC infrastructure decodes incoming requests, executes service methods, and encodes service responses.

- On the client side, the client has a local object known as stub (for some languages, the preferred term is client) that implements the same methods as the service. The client can then just call those methods on the local object, wrapping the parameters for the call in the appropriate protocol buffer message type - gRPC looks after sending the request(s) to the server and returning the serverâ€™s protocol buffer response(s).

.. note:: Keep in mind that Dialog does not use default gRPC implementation. Dialg uses gRPC only as an Interface Definition Language and code generation tool. All HTTP2-related code generated by gRPC is not used and interfaces generated by gRPC need to be implemented by both client and server on their own. See the next section for details.